from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, desc, asc
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from core.models.notification import ProcessNotification, NotificationPreference
from core.models.process import Process, ProcessDeadline, ProcessTimeline
from core.models.user import User
import uuid
import logging

logger = logging.getLogger(__name__)

class NotificationService:
    """Servi√ßo inteligente de notifica√ß√µes para advogados"""
    
    def __init__(self, db: Session):
        self.db = db
    
    # ==================== NOTIFICA√á√ïES DE PRAZOS ====================
    
    async def create_deadline_notification(self, deadline: ProcessDeadline, user_id: str) -> ProcessNotification:
        """Cria notifica√ß√£o de prazo"""
        days_until_deadline = (deadline.due_date - datetime.now()).days
        
        if days_until_deadline <= 0:
            priority = "critical"
            title = f"‚ö†Ô∏è PRAZO VENCIDO: {deadline.title}"
            message = f"O prazo '{deadline.title}' do processo venceu hoje!"
        elif days_until_deadline == 1:
            priority = "high"
            title = f"üö® PRAZO AMANH√É: {deadline.title}"
            message = f"O prazo '{deadline.title}' vence amanh√£!"
        elif days_until_deadline <= 3:
            priority = "high"
            title = f"‚è∞ PRAZO PR√ìXIMO: {deadline.title}"
            message = f"O prazo '{deadline.title}' vence em {days_until_deadline} dias"
        else:
            priority = "normal"
            title = f"üìÖ PRAZO: {deadline.title}"
            message = f"Lembrete: prazo '{deadline.title}' vence em {days_until_deadline} dias"
        
        notification = ProcessNotification(
            id=uuid.uuid4(),
            tenant_id=deadline.process.tenant_id,
            process_id=deadline.process_id,
            user_id=user_id,
            notification_type="deadline",
            priority=priority,
            title=title,
            message=message,
            notification_data={
                "deadline_id": str(deadline.id),
                "due_date": deadline.due_date.isoformat(),
                "days_until": days_until_deadline,
                "deadline_type": deadline.deadline_type
            }
        )
        
        self.db.add(notification)
        self.db.commit()
        return notification
    
    # ==================== NOTIFICA√á√ïES DE ANDAMENTOS ====================
    
    async def create_court_update_notification(self, timeline_entry: ProcessTimeline, user_id: str) -> ProcessNotification:
        """Cria notifica√ß√£o de atualiza√ß√£o do tribunal"""
        
        # Classificar tipo de andamento
        if "senten√ßa" in timeline_entry.type.lower() or "julgamento" in timeline_entry.type.lower():
            notification_type = "senten√ßa"
            priority = "high"
            emoji = "‚öñÔ∏è"
            title = f"‚öñÔ∏è SENTEN√áA: {timeline_entry.process.subject}"
        elif "audi√™ncia" in timeline_entry.type.lower():
            notification_type = "audi√™ncia"
            priority = "high"
            emoji = "üèõÔ∏è"
            title = f"üèõÔ∏è AUDI√äNCIA: {timeline_entry.process.subject}"
        elif "prazo" in timeline_entry.type.lower():
            notification_type = "prazo"
            priority = "normal"
            emoji = "‚è∞"
            title = f"‚è∞ PRAZO: {timeline_entry.process.subject}"
        else:
            notification_type = "andamento"
            priority = "normal"
            emoji = "üìã"
            title = f"üìã ANDAMENTO: {timeline_entry.process.subject}"
        
        message = f"{emoji} {timeline_entry.description[:100]}..."
        
        notification = ProcessNotification(
            id=uuid.uuid4(),
            tenant_id=timeline_entry.process.tenant_id,
            process_id=timeline_entry.process_id,
            user_id=user_id,
            notification_type=notification_type,
            priority=priority,
            title=title,
            message=message,
            notification_data={
                "timeline_id": str(timeline_entry.id),
                "andamento_type": timeline_entry.type,
                "court_decision": timeline_entry.court_decision
            }
        )
        
        self.db.add(notification)
        self.db.commit()
        return notification
    
    # ==================== NOTIFICA√á√ïES DE PROCESSOS URGENTES ====================
    
    async def create_urgent_process_notification(self, process: Process, user_id: str) -> ProcessNotification:
        """Cria notifica√ß√£o de processo urgente"""
        
        notification = ProcessNotification(
            id=uuid.uuid4(),
            tenant_id=process.tenant_id,
            process_id=process.id,
            user_id=user_id,
            notification_type="urgente",
            priority="critical",
            title=f"üö® PROCESSO URGENTE: {process.subject}",
            message=f"O processo {process.cnj_number} foi marcado como urgente e requer aten√ß√£o imediata!",
            notification_data={
                "process_number": process.cnj_number,
                "priority": process.priority,
                "requires_attention": process.requires_attention
            }
        )
        
        self.db.add(notification)
        self.db.commit()
        return notification
    
    # ==================== NOTIFICA√á√ïES DE RESUMO ====================
    
    async def create_daily_summary_notification(self, user_id: str, tenant_id: str) -> ProcessNotification:
        """Cria notifica√ß√£o de resumo di√°rio"""
        
        # Buscar estat√≠sticas do dia
        today = datetime.now().date()
        tomorrow = today + timedelta(days=1)
        
        # Prazos vencendo hoje
        deadlines_today = self.db.query(ProcessDeadline).join(Process).filter(
            and_(
                Process.tenant_id == tenant_id,
                ProcessDeadline.due_date >= today,
                ProcessDeadline.due_date < tomorrow,
                ProcessDeadline.status == "pending"
            )
        ).count()
        
        # Novos andamentos
        new_updates = self.db.query(ProcessTimeline).join(Process).filter(
            and_(
                Process.tenant_id == tenant_id,
                ProcessTimeline.created_at >= today,
                ProcessTimeline.created_at < tomorrow
            )
        ).count()
        
        # Processos urgentes
        urgent_processes = self.db.query(Process).filter(
            and_(
                Process.tenant_id == tenant_id,
                Process.requires_attention == True,
                Process.status == "active"
            )
        ).count()
        
        title = f"üìä RESUMO DI√ÅRIO - {today.strftime('%d/%m/%Y')}"
        message = f"üìÖ {deadlines_today} prazos vencendo hoje | üìã {new_updates} novos andamentos | üö® {urgent_processes} processos urgentes"
        
        notification = ProcessNotification(
            id=uuid.uuid4(),
            tenant_id=tenant_id,
            process_id=None,
            user_id=user_id,
            notification_type="resumo",
            priority="normal",
            title=title,
            message=message,
            notification_data={
                "deadlines_today": deadlines_today,
                "new_updates": new_updates,
                "urgent_processes": urgent_processes,
                "date": today.isoformat()
            }
        )
        
        self.db.add(notification)
        self.db.commit()
        return notification
    
    # ==================== GEST√ÉO DE NOTIFICA√á√ïES ====================
    
    async def get_user_notifications(
        self, 
        user_id: str, 
        tenant_id: str,
        unread_only: bool = False,
        limit: int = 50
    ) -> List[ProcessNotification]:
        """Busca notifica√ß√µes do usu√°rio"""
        
        query = self.db.query(ProcessNotification).filter(
            and_(
                ProcessNotification.user_id == user_id,
                ProcessNotification.tenant_id == tenant_id,
                ProcessNotification.is_archived == False
            )
        )
        
        if unread_only:
            query = query.filter(ProcessNotification.is_read == False)
        
        return query.order_by(desc(ProcessNotification.created_at)).limit(limit).all()
    
    async def mark_notification_as_read(self, notification_id: str, user_id: str) -> bool:
        """Marca notifica√ß√£o como lida"""
        
        notification = self.db.query(ProcessNotification).filter(
            and_(
                ProcessNotification.id == notification_id,
                ProcessNotification.user_id == user_id
            )
        ).first()
        
        if notification:
            notification.is_read = True
            notification.read_at = datetime.now()
            self.db.commit()
            return True
        
        return False
    
    async def mark_all_notifications_as_read(self, user_id: str, tenant_id: str) -> int:
        """Marca todas as notifica√ß√µes como lidas"""
        
        result = self.db.query(ProcessNotification).filter(
            and_(
                ProcessNotification.user_id == user_id,
                ProcessNotification.tenant_id == tenant_id,
                ProcessNotification.is_read == False
            )
        ).update({
            "is_read": True,
            "read_at": datetime.now()
        })
        
        self.db.commit()
        return result
    
    async def archive_notification(self, notification_id: str, user_id: str) -> bool:
        """Arquiva notifica√ß√£o"""
        
        notification = self.db.query(ProcessNotification).filter(
            and_(
                ProcessNotification.id == notification_id,
                ProcessNotification.user_id == user_id
            )
        ).first()
        
        if notification:
            notification.is_archived = True
            notification.archived_at = datetime.now()
            self.db.commit()
            return True
        
        return False
    
    # ==================== PREFER√äNCIAS DE NOTIFICA√á√ÉO ====================
    
    async def get_user_preferences(self, user_id: str, tenant_id: str) -> Optional[NotificationPreference]:
        """Busca prefer√™ncias de notifica√ß√£o do usu√°rio"""
        
        return self.db.query(NotificationPreference).filter(
            and_(
                NotificationPreference.user_id == user_id,
                NotificationPreference.tenant_id == tenant_id
            )
        ).first()
    
    async def create_or_update_preferences(
        self, 
        user_id: str, 
        tenant_id: str, 
        preferences_data: Dict[str, Any]
    ) -> NotificationPreference:
        """Cria ou atualiza prefer√™ncias de notifica√ß√£o"""
        
        preferences = await self.get_user_preferences(user_id, tenant_id)
        
        if not preferences:
            preferences = NotificationPreference(
                id=uuid.uuid4(),
                tenant_id=tenant_id,
                user_id=user_id
            )
            self.db.add(preferences)
        
        # Atualizar campos
        for field, value in preferences_data.items():
            if hasattr(preferences, field):
                setattr(preferences, field, value)
        
        self.db.commit()
        return preferences
    
    # ==================== NOTIFICA√á√ïES AUTOM√ÅTICAS ====================
    
    async def check_and_create_deadline_notifications(self, tenant_id: str) -> List[ProcessNotification]:
        """Verifica e cria notifica√ß√µes de prazos automaticamente"""
        
        notifications_created = []
        today = datetime.now().date()
        
        # Buscar prazos pr√≥ximos
        upcoming_deadlines = self.db.query(ProcessDeadline).join(Process).filter(
            and_(
                Process.tenant_id == tenant_id,
                ProcessDeadline.status == "pending",
                ProcessDeadline.due_date >= today,
                ProcessDeadline.due_date <= today + timedelta(days=7)
            )
        ).all()
        
        for deadline in upcoming_deadlines:
            # Buscar advogados respons√°veis pelo processo
            lawyers = self.db.query(User).join(Process.lawyers).filter(
                Process.id == deadline.process_id
            ).all()
            
            for lawyer in lawyers:
                # Verificar se j√° existe notifica√ß√£o recente
                existing_notification = self.db.query(ProcessNotification).filter(
                    and_(
                        ProcessNotification.user_id == lawyer.id,
                        ProcessNotification.process_id == deadline.process_id,
                        ProcessNotification.notification_type == "deadline",
                        ProcessNotification.notification_data.contains({"deadline_id": str(deadline.id)}),
                        ProcessNotification.created_at >= today
                    )
                ).first()
                
                if not existing_notification:
                    # Verificar prefer√™ncias do usu√°rio
                    preferences = await self.get_user_preferences(lawyer.id, tenant_id)
                    
                    if not preferences or preferences.deadline_notifications:
                        notification = await self.create_deadline_notification(deadline, lawyer.id)
                        notifications_created.append(notification)
        
        return notifications_created
    
    async def create_court_update_notifications_for_process(
        self, 
        process_id: str, 
        timeline_entry: ProcessTimeline
    ) -> List[ProcessNotification]:
        """Cria notifica√ß√µes de atualiza√ß√£o do tribunal para todos os advogados do processo"""
        
        notifications_created = []
        
        # Buscar advogados respons√°veis pelo processo
        lawyers = self.db.query(User).join(Process.lawyers).filter(
            Process.id == process_id
        ).all()
        
        for lawyer in lawyers:
            # Verificar prefer√™ncias do usu√°rio
            preferences = await self.get_user_preferences(lawyer.id, timeline_entry.process.tenant_id)
            
            if not preferences or preferences.court_updates:
                notification = await self.create_court_update_notification(timeline_entry, lawyer.id)
                notifications_created.append(notification)
        
        return notifications_created
